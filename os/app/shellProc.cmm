/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "lcd2.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "shellProc.hmm"

#define N 6

int top_cursor = 0;
int head_playlist = 0; //playlist count: 先頭に表示するプレイリストは何番目かを示す
int bottom_cursor = 0; //下のカーソル
boolean isplaying = false;
boolean isshuffle = false;
boolean isrepeat = false;
int playing_playlist_id = 0;
int playing_music_id = 0;
int cnt = 0;
int sleep_cnt = 0;
boolean issleep = false;

int min(int x,int y){
    if(x<=y) return x;
    else return y;
    return 0;
}

int max(int x,int y){
    if(x>=y) return x;
    else return y;
    return 0;
}

void inc(){
    if(top_cursor==3) head_playlist=min(head_playlist+1,N-4);
    else top_cursor = top_cursor+1;
}

void dec(){
    if(top_cursor==0) head_playlist=max(head_playlist-1,0);
    else top_cursor = top_cursor-1;
}

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}
      
//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------

char[] shuffle_font1 = { '\x94', '\x54', '\x34', '\x00', '\x28', '\x20', '\x18', '\x00' };
char[] shuffle_font2 = { '\x2c', '\x24', '\xfc', '\x02', '\x31', '\x28', '\x24', '\x70' };
char[] repeat_font1 = { '\x00', '\x0c', '\x40', '\x3c', '\x00', '\x3c', '\x28', '\x28' };
char[] repeat_font2 = { '\x04', '\x10', '\x10', '\x00', '\x3c', '\x10', '\x00', '\x00' };

void demoScreen() {
  cls();                                            // LCDをクリアする
  disp_top(head_playlist, top_cursor);
  disp_title(playing_playlist_id, playing_music_id);
  disp_bottom(bottom_cursor, isplaying, isshuffle, isrepeat);
  locateXY(7,7);spiWriteLcdDat(shuffle_font1, 8);
  locateXY(8,7);spiWriteLcdDat(shuffle_font2, 8);
  locateXY(11,7);spiWriteLcdDat(repeat_font1, 8);
  locateXY(12,7);spiWriteLcdDat(repeat_font2, 8);
  
}

int mylfsr = 1;
int myrand() {
  mylfsr = ((mylfsr >> 1) & 0x7fff) ^ (-(mylfsr & 1) & 0xb400); 
  return mylfsr;
}

int current_y;
void move_y(){
  int val = myrand()%3;
  if(val==0){
    current_y = max(0,current_y-1);
  }else if(val==1){
    current_y = current_y;
  }else if(val==2){
    current_y = min(5,current_y+1);
  }
}

void set_sleep(){
  issleep = true;
  cnt = 0;
  current_y = myrand()%7;
  cls();
}

void sleep_mode(int num){
  if (num>0) issleep = false;//ここのif文はsleep解除の条件に変更
    if(cnt%100==0){cls();move_y();disp_fish(cnt/100-1, current_y);}
    cnt = (cnt+1)%2000;
    sleep(10);
}

void operation_mode(int num){
  demoScreen();
  if (num==1){
    playing_playlist_id = head_playlist+top_cursor;
    playing_music_id = 0;
    sleep_cnt=0;
  }else if (num==2){
    dec();
    sleep_cnt=0;
  } else if (num==3){
    inc();
    sleep_cnt=0;
  } else if(num==4){
    bottom_cursor = max(bottom_cursor-1, 0);
    sleep_cnt=0;
  } else if(num==5){
    if(bottom_cursor==0){
      playing_music_id = max(playing_music_id-1,0);
      //play(playling_playlist_id,playing_music_id);
    }
    else if(bottom_cursor==1){
      //再生・停止を切り替え
      //isplaying = !isplaying; //藤村
      isplaying = get_playing();
      if(isplaying == false)
      	{play(playing_playlist_id, playing_music_id);}
      else{stop();}
    	isplaying = get_playing();
    }
    else if(bottom_cursor==2){
      //一曲戻す
      playing_music_id = min(playing_music_id+1,getMaxnumMusic(playing_playlist_id));
    }
    else if(bottom_cursor==3){
      //シャッフル切り替え
      //isshuffle = !isshuffle;  //藤村
      change_shuffle();
    }
    else if(bottom_cursor==4){
      //リピート切り替え
      //isrepeat = !isrepeat;   //藤村
      change_repeat();
    }
    sleep_cnt=0;
  } else if (num==6){
    bottom_cursor = min(bottom_cursor+1, 4);
    sleep_cnt=0;
  } else{
    if(sleep_cnt > 1000){
    		sleep_cnt = 0;
    		set_sleep();
    }else{
    		sleep_cnt = sleep_cnt + 1;
    }
  }
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  demoScreen();                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if(issleep) sleep_mode(num);
    else operation_mode(num);
    sleep(10);                                      // 10ms に一度
  }
}
