/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Files.cmm : MP3ファイルの一覧
 *
 * 2020.09.16 : 新規作成
 *
 * $Id$
 *
 */
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"

//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大５個）
//-----------------------------------------------------------------------------
// ５つのファイル名
//char[][] fnames = array(5, 13);                     // 12345678.123
int numPlaylist;                                        // プレイリストの個数
int numMusic;
char[] mp3Dir = "/MP3";
char[] path = array(18);                            // /MP3/12345678.123

char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

char[][][] files = array(8, 6, 18);

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir dir;
  int i = 0;
  int j = 0;
  while (i<8 && (dir=readDir(fd, "MP3"))!=null) {
    while (j<5){// 最大8つのプレイリストと5つファイル名を読む
      strCpy(files[i][j], dir.name);
      j = j+1;
    }
      files[i][j][0] = '\0'; //番兵的なノリをいれる
    i = i+1;
  }
  numPlaylist = i;
  close(fd);
}

// (i,j)番目ファイル名を返す
public char[] mp3FilesGetMusicName(int i, int j) {
  numMusic = getMaxnumMusic(i);
  if (1<=i && i<=numPlaylist && 1<=j && j<=numMusic) {
    return files[i][j];
  }
  return null;
}

// (i,j) 番目パス名を返す
public char[] mp3FilesGetPath(int i, int j) {
  numMusic = getMaxnumMusic(i);
  if (1<=i && i<=numPlaylist && 1<=j && j<=numMusic) {
    return fnameToPath(files[i][j]);
  }
  return null;
}

//プレイリスト数を返す
public int getMaxnumPlaylist(){
  return numPlaylist;
}

// i番目のプレイリストの曲数を返す
public int getMaxnumMusic(int n){
  int j = 0;
  while (true){
    if (files[n][j][0] =='\0') break;
    j=j+1;
  }
  return j;
}
