/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lcd.cmm : 液晶ディスプレイのドライバ
 *
 * 2020.08.23 : spitestの一部から組み込み用に転用
 * 2019.08.26 : 液晶の上下をもとに戻す．リセット機能を util.cmm に移動する．
 * 2019.08.18 : 液晶の上下を逆にする
 * 2019.08.09 : 新規作成
 *
 * $Id$
 *
 */

#include <stdlib.hmm>
#include "spi.hmm"
#include "font.hmm"
#include "lcd.hmm"

int[][][] playlist_font = {
    { //A
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  // A00
    { 0x00,0xc0,0xf0,0xfc,0xfc,0xf0,0x00,0x00 },  // A01
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  // A02
    { 0x00,0x00,0x00,0x00,0x00,0xc0,0xf0,0xfc },  // A10
    { 0xff,0xff,0xcf,0xc3,0xc3,0xcf,0xff,0xff },  // A11
    { 0xfc,0xf0,0xc0,0x00,0x00,0x00,0x00,0x00 },  // A12
    { 0x00,0x00,0x30,0x3c,0x3f,0x3f,0x0f,0x03 },  // A20
    { 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01 },  // A21
    { 0x03,0x0f,0x3f,0x3f,0x3c,0x3c,0x00,0x00 }   // A22
    },
    { //B
    { 0x00,0x00,0x00,0x00,0x00,0xfc,0xfc,0xfc },  // B00
    { 0xfc,0x0c,0x0c,0x0c,0x0c,0x18,0x18,0x18 },  // B01
    { 0x18,0xf0,0xf0,0xf0,0xf0,0x00,0x00,0x00 },  // B02
    { 0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff },  // B10
    { 0xff,0x18,0x18,0x18,0x18,0x38,0x38,0x38 },  // B11
    { 0x38,0xc7,0xc7,0xc7,0xc7,0x00,0x00,0x00 },  // B12
    { 0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x3f },  // B20
    { 0x3f,0x30,0x30,0x30,0x30,0x18,0x18,0x18 },  // B21
    { 0x18,0x0f,0x0f,0x0f,0x0f,0x00,0x00,0x00 }   // B22
    },
    { //C
    { 0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0 },  // C00
    { 0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60 },  // C01
    { 0x60,0x60,0xe0,0xc0,0x80,0x00,0x00,0x00 },  // C02
    { 0x00,0x00,0x00,0xfe,0xff,0x03,0x01,0x00 },  // C10
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  // C11
    { 0x00,0x00,0x00,0x01,0x03,0x00,0x00,0x00 },  // C12
    { 0x00,0x00,0x00,0x00,0x01,0x07,0x0e,0x1c },  // C20
    { 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 },  // C21
    { 0x18,0x18,0x1c,0x0e,0x07,0x00,0x00,0x00 }   // C22
    },
    { //D
    { 0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0 },  // D00
    { 0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xc0 },  // D01
    { 0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00 },  // D02
    { 0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff },  // D10
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  // D11
    { 0x81,0xc3,0xff,0x3c,0x00,0x00,0x00,0x00 },  // D12
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07 },  // D20
    { 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x03 },  // D21
    { 0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00 }   // D22
    },
    { //E
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0 },  // E00
    { 0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30 },  // E01
    { 0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00 },  // E02
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff },  // E10
    { 0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18 },  // E11
    { 0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00 },  // E12
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f },  // E20
    { 0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c },  // E21
    { 0x0c,0x0c,0x00,0x00,0x00,0x00,0x00,0x00 }   // E22
    },
    { //F
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0 },  // F00
    { 0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30 },  // F01
    { 0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00 },  // F02
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff },  // F10
    { 0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18 },  // F11
    { 0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00 },  // F12
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f },  // F20
    { 0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  // F21
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }   // F22
    }
};

int[][] bigcursor_font = {
    { 0xff,0x01,0x01,0x01,0x01,0x01,0x01,0x01 },
    { 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01 },
    { 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff },
    { 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
    { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff },
    { 0xff,0x80,0x80,0x80,0x80,0x80,0x80,0x80 },
    { 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80 },
    { 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xff }
};

int[][] operation_font_list = {
  { 0x18, 0x3c, 0x7e, 0x00, 0x18, 0x3c, 0x7e, 0x00 }, //leftarrow
  { 0x00, 0x00, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00 }, //playing
  { 0x00, 0x7e, 0x7e, 0x00, 0x00, 0x7e, 0x7e, 0x00 }, //stop
  { 0x7e, 0x3c, 0x18, 0x00, 0x7e, 0x3c, 0x18, 0x00 }, //rightarrow
  { 0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x00 }, //maru
  { 0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 } //batu
};


int[] cursor_font = { 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff };


char[] locateCom = { '\xb0',   // page address
                     '\x10',   // column address Hi = 0x00
                     '\x00',   // column address Lo = 0x00
                     '\xff' }; // EOF


char[] font_tmp = array(8);

public void putplaylistfont(int i, int j, boolean iscursor){
  //char[] font_tmp = cMalloc(8);
  if(iscursor){
    for(int k=0; k<8; k=k+1){
      font_tmp[k] = chr(playlist_font[i][j][k] | bigcursor_font[j][k]);
    }
  }else{
    for(int k=0; k<8; k=k+1){
      font_tmp[k] = chr(playlist_font[i][j][k]);
    }
  }spiWriteLcdDat(font_tmp, 8);
  //free(font_tmp);
}

char[] font_tmp2 = array(8);

public void putoperationfont(int operation_id, boolean iscursor){
  if(iscursor){
    for(int k=0; k<8; k=k+1){
      font_tmp2[k] = chr(operation_font_list[operation_id][k] | cursor_font[k]);
    }
  }else{
    for(int k=0; k<8; k=k+1){
      font_tmp2[k] = chr(operation_font_list[operation_id][k]);
    }
  }spiWriteLcdDat(font_tmp2, 8);
}

// 液晶上でカーソルを(x,y)に移動
public void locateXY(int x, int y) {
  int x8 = x * 8;
  locateCom[0] = chr(0xb0 | y);             // page address
  locateCom[1] = chr(0x10 | (x8>>4));       // column address Hi
  locateCom[2] = chr(0x00 + (x8 & 0x0f));   // column address Lo
  spiWriteLcdCom(locateCom);
}

// カーソル位置に１文字表示
public void putCh(char c) {
  spiWriteLcdDat(font(c), 8);
}

// カーソル位置に文字列表示
public void putStr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1) {
    putCh(str[i]);
  }
}

// カーソル位置に桁数を指定して右詰めで10進数を表示
char[] decBuf = array(6);                   // 16bit int なら最大5桁
public void putDec(int val, int width) {
  int v = val;
  int w = 1;
  if (v==0) {
    decBuf[0]='0';
  } else {
    for (w=0; v!=0; w=w+1) {
      decBuf[w]=chr((v % 10) + ord('0'));
      v = v / 10;
    }
  }
  for (int i=w; i<width; i=i+1) {           // 空白で桁数を合わせる
    putCh(' ');
  }
  for (w=w-1; w>=0; w=w-1) {
    putCh(decBuf[w]);
  }
}

public void cls() {
  for (int i=0; i<8; i=i+1) {
    locateXY(0, i);
    for (int j=0; j<16; j=j+1) {
      putCh(' ');
    }
  }
}

char[][] fish_font_list = {
  { '\x00','\x00','\x00','\x00','\x00','\x00','\x00','\x00' },  // 20( )
  { '\x00','\x00','\x06','\x5f','\x5f','\x06','\x00','\x00' },  // 21(!)
  { '\x00','\x03','\x03','\x00','\x03','\x03','\x00','\x00' },  // 22(")
  { '\x14','\x7f','\x7f','\x14','\x7f','\x7f','\x14','\x00' },  // 23(#)
  { '\x24','\x2e','\x6b','\x6b','\x3a','\x12','\x00','\x00' },  // 24($)
  { '\x46','\x66','\x30','\x18','\x0c','\x66','\x62','\x00' },  // 25(%)
  { '\x30','\x7a','\x4f','\x5d','\x37','\x7a','\x48','\x00' },  // 26(&)
  { '\x04','\x07','\x03','\x00','\x00','\x00','\x00','\x00' },  // 27(')
  { '\x00','\x1c','\x3e','\x63','\x41','\x00','\x00','\x00' },  // 28(()
  { '\x00','\x41','\x63','\x3e','\x1c','\x00','\x00','\x00' },  // 29())
  { '\x08','\x2a','\x3e','\x1c','\x1c','\x3e','\x2a','\x08' },  // 2a(*)
  { '\x08','\x08','\x3e','\x3e','\x08','\x08','\x00','\x00' }  // 2b(+)
};

public void disp_fish(int cnt){
  int y = 5;
  for (int i=cnt; (i>cnt-4) && (i>=0); i=i-1){
      locateXY(i,y);spiWriteLcdDat(fish_font_list[3*(cnt-i)], 8);
      locateXY(i,y+1);spiWriteLcdDat(fish_font_list[3*(cnt-i)+1], 8);
      locateXY(i,y+2);spiWriteLcdDat(fish_font_list[3*(cnt-i)+2], 8);
  }
}

/*public void disp_fish(int cnt){
  for (int i=cnt; (i>cnt-4) && (i>=0); i=i-1){
      locateXY(i,3);spiWriteLcdDat(fish_font_list[3*(cnt-i)], 8);
      locateXY(i,4);spiWriteLcdDat(fish_font_list[3*(cnt-i)+1], 8);
      locateXY(i,5);spiWriteLcdDat(fish_font_list[3*(cnt-i)+2], 8);
  }
}
*/